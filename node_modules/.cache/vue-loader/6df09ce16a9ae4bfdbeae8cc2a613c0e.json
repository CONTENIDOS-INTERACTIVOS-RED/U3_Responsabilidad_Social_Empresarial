{"remainingRequest":"/home/runner/work/U3_Responsabilidad_Social_Empresarial/U3_Responsabilidad_Social_Empresarial/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Responsabilidad_Social_Empresarial/U3_Responsabilidad_Social_Empresarial/src/views/curso/Tema1.vue?vue&type=template&id=cc5f0c36&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Responsabilidad_Social_Empresarial/U3_Responsabilidad_Social_Empresarial/src/views/curso/Tema1.vue","mtime":1740337637553},{"path":"/home/runner/work/U3_Responsabilidad_Social_Empresarial/U3_Responsabilidad_Social_Empresarial/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Responsabilidad_Social_Empresarial/U3_Responsabilidad_Social_Empresarial/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Responsabilidad_Social_Empresarial/U3_Responsabilidad_Social_Empresarial/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Responsabilidad_Social_Empresarial/U3_Responsabilidad_Social_Empresarial/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Responsabilidad_Social_Empresarial/U3_Responsabilidad_Social_Empresarial/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMS4gQ29udGV4dG8gU29jaWFsIEVtcHJlc2FyaWFsIHkgUmVzcG9uc2FiaWxpZGFkIFNvY2lhbCBFbXByZXNhcmlhbCAgJyIpCiAgLmNvbnRhaW5lci50YXJqZXRhLnRhcmpldGEtLWJsYW5jYS5wLTQucC1tZC01Lm92ZXJmbG93LWhpZGRlbgoKICAgIC5iZy1jb2xvci01Lm1iLTUoZGF0YS1hb3M9ImZhZGUtdXAiKQogICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgLmNvbC1sZy1hdXRvLm1iLTMubWItbGctMAogICAgICAgICAgZmlndXJlCiAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWExLzEucG5nJywgYWx0PScnKQogICAgICAgIC5jb2wtbGcKICAgICAgICAgIC5wLTQKICAgICAgICAgICAgcC5tYi0wKGRhdGEtYW9zPSJmYWRlLXVwIikgRW4gbG9zIMO6bHRpbW9zIGHDsW9zLCBsYXMgb3JnYW5pemFjaW9uZXMgaGFuIGFkcXVpcmlkbyBtYXlvciByZWxldmFuY2lhIGVuIHN1IGVudG9ybm8gc29jaWFsLiBFbCBjb250ZXh0byBzb2NpYWwgZW1wcmVzYXJpYWwgYWJhcmNhIGxvcyBlbGVtZW50b3Mgc29jaWFsZXMsIGVjb27Ds21pY29zLCBwb2zDrXRpY29zIHkgY3VsdHVyYWxlcyBxdWUgYWZlY3RhbiBhIGxhcyBvcmdhbml6YWNpb25lcy4gRW4gZXN0ZSBtYXJjbywgbGEgcmVzcG9uc2FiaWxpZGFkIHNvY2lhbCBlbXByZXNhcmlhbCAoUlNFKSBzZSBjb25maWd1cmEgY29tbyB1bmEgZXN0cmF0ZWdpYSBjbGF2ZSBxdWUgcGVybWl0ZSBhIGxhcyBvcmdhbml6YWNpb25lcyBubyBzb2xvIHJlc3BvbmRlciBhIGxhcyBleHBlY3RhdGl2YXMgZGUgc3VzIGdydXBvcyBkZSBpbnRlcsOpcywgc2lubyB0YW1iacOpbiBjb250cmlidWlyIGFsIGRlc2Fycm9sbG8gc29zdGVuaWJsZSB5IGZvcnRhbGVjZXIgc3UgcG9zaWNpw7NuIGVuIGVsIG1lcmNhZG8uCiAgICAKICAgIC5yb3cubWItNQogICAgICAuY29sLWxnLTcKICAgICAgICAuYmctY29sb3ItMS5weC00LnB5LTUoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTQKICAgICAgICAgIHAubWItMCBMYSBSU0UgaGEgZW1lcmdpZG8gY29tbyB1bmEgaGVycmFtaWVudGEgaW5kaXNwZW5zYWJsZSBwYXJhIGVuZnJlbnRhciBsb3MgcmV0b3MgZGUgbGEgZ2xvYmFsaXphY2nDs24geSBsb3MgY2FtYmlvcyBlbiBsYXMgZGVtYW5kYXMgc29jaWFsZXMuIFNlZ8O6biBHdWliZXJ0IFVjw61uICgyMDEzKSwgc3UgaW1wbGVtZW50YWNpw7NuIGVuIHBlcXVlw7FhcyB5IG1lZGlhbmFzIGVtcHJlc2FzIChweW1lcykgbm8gc29sbyBnZW5lcmEgdmVudGFqYXMgY29tcGV0aXRpdmFzLCBzaW5vIHF1ZSB0YW1iacOpbiBtZWpvcmEgbGFzIHJlbGFjaW9uZXMgY29uIGxhcyBjb211bmlkYWRlcyB5IG90cm9zIGFjdG9yZXMgY2xhdmUuIEVzdGUgZW5mb3F1ZSBheXVkYSBhIGFsaW5lYXIgbG9zIG9iamV0aXZvcyBlY29uw7NtaWNvcyBkZSBsYXMgZW1wcmVzYXMgY29uIGVsIGJpZW5lc3RhciBzb2NpYWwgeSBhbWJpZW50YWwsIHByb21vdmllbmRvIGVsIHZhbG9yIGNvbXBhcnRpZG8uCiAgICAgICAgCiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgRW4gQ29sb21iaWEsIGxhcyBvcmdhbml6YWNpb25lcyBubyBndWJlcm5hbWVudGFsZXMgKE9ORykgZGVzZW1wZcOxYW4gdW4gcGFwZWwgcmVsZXZhbnRlIGVuIGxhIHByb21vY2nDs24gZGUgcHLDoWN0aWNhcyByZXNwb25zYWJsZXMuIFBpbnrDs24gQ2FtYXJnbyAoMjAwOSkgZGVzdGFjYSBxdWUgbGFzIE9ORyBhY3TDumFuIGNvbW8gaW50ZXJtZWRpYXJpYXMgZW50cmUgZW1wcmVzYXMgeSBzb2NpZWRhZCwgZm9tZW50YW5kbyBhY2Npb25lcyBxdWUgZXF1aWxpYnJhbiBlbCBwcm9ncmVzbyBlY29uw7NtaWNvIGNvbiBsYSBqdXN0aWNpYSBzb2NpYWwuIFN1IGxhYm9yIGVzIGVzZW5jaWFsIHBhcmEgZ2FyYW50aXphciBxdWUgbGFzIGVtcHJlc2FzIGF0aWVuZGFuIGxhcyBuZWNlc2lkYWRlcyBkZSBsYXMgY29tdW5pZGFkZXMgbG9jYWxlcy4KICAgICAgLmNvbC1sZy01LmQtbm9uZS5kLXNtLWJsb2NrCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8yLnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikubWItNC5tYi1sZy0wCiAgICAKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTMubWItNQogICAgICAucHgtNC5weC1tZC01LnB5LTQKICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzMuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgcC5tYi0wIExhIFJTRSBlbmZyZW50YSBkZXNhZsOtb3MgaW1wb3J0YW50ZXMsIGNvbW8gbGEgY29ycnVwY2nDs24geSBlbCBzb2Jvcm5vLCBxdWUgYWZlY3RhbiB0YW50byBsYSByZXB1dGFjacOzbiBjb3Jwb3JhdGl2YSBjb21vIGVsIGltcGFjdG8gcG9zaXRpdm8gZGUgbGFzIGluaWNpYXRpdmFzIGRlIHJlc3BvbnNhYmlsaWRhZCBzb2NpYWwuIFBvciBlbGxvLCBsYXMgb3JnYW5pemFjaW9uZXMgZGViZW4gYWRvcHRhciBtZWRpZGFzIHBhcmEgcHJldmVuaXIgZXN0b3MgY29tcG9ydGFtaWVudG9zIHkgZXN0YWJsZWNlciByZWxhY2lvbmVzIMOpdGljYXMgeSB0cmFuc3BhcmVudGVzIGNvbiBzdXMgZ3J1cG9zIGRlIGludGVyw6lzLgogICAgCiAgICBoMihkYXRhLWFvcz0iZmFkZS1sZWZ0IikgRWxlbWVudG9zIGNsYXZlIGRlIGxhIGludmVzdGlnYWNpw7NuCiAgICBwLm1iLTUgRW4gZXN0ZSBhbsOhbGlzaXMgc2UgZXhwbG9yYXLDoW4gbG9zIHNpZ3VpZW50ZXMgYXNwZWN0b3M6CgoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTcubWItNQogICAgICAucHgtNC5weC1tZC01LnBiLW1kLTMKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTcoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm9yZGVyLTIKICAgICAgICAgICAgdWwubGlzdGEtdWwKICAgICAgICAgICAgICBsaS5tYi00LmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodCAKICAgICAgICAgICAgICAgIHAubWItMCBMb3MgY29uY2VwdG9zIGZ1bmRhbWVudGFsZXMgZGUgbGEgUlNFIHkgc3UgYXBsaWNhY2nDs24gZW4gZGl2ZXJzb3MgY29udGV4dG9zLgogICAgICAgICAgICAgIGxpLm1iLTQuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0IAogICAgICAgICAgICAgICAgcC5tYi0wIEVsIHBhcGVsIGRlIGxhcyBPTkcgZW4gbGEgcHJvbW9jacOzbiBkZSBwcsOhY3RpY2FzIHJlc3BvbnNhYmxlcy4KICAgICAgICAgICAgICBsaS5tYi00LmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodCAKICAgICAgICAgICAgICAgIHAubWItMCBMYSBnZW5lcmFjacOzbiBkZSB2YWxvciBjb21wYXJ0aWRvIGVuIGxhcyBvcmdhbml6YWNpb25lcy4KICAgICAgICAgICAgICBsaS5tYi00LmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodCAKICAgICAgICAgICAgICAgIHAubWItMCBMb3MgZWZlY3RvcyBkZSBsYSBjb3JydXBjacOzbiBlbiBlbCDDoW1iaXRvIGVtcHJlc2FyaWFsLgogICAgICAgICAgLmNvbC1sZy01KGRhdGEtYW9zPSJ6b29tLWluIikub3JkZXItMS5tYi0zLm1iLWxnLTAKICAgICAgICAgICAgaW1nLmltZy1mbHVpZChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWExLzQuc3ZnJywgc3R5bGU9Im1heC13aWR0aDo0ODZweCIsIGFsdD0iIiApLm14LWF1dG8ubXgtbGctMC5tcy1sZy1hdXRvLm1iLTQubWItbGctMAogICAgCiAgICBwLm1iLTUgRXN0ZSBlbmZvcXVlIGJ1c2NhIGNvbXByZW5kZXIgY8OzbW8gbGFzIG9yZ2FuaXphY2lvbmVzIHB1ZWRlbiBjb250cmlidWlyIGFsIGJpZW5lc3RhciBzb2NpYWwgeSBhbWJpZW50YWwsIGdhcmFudGl6YW5kbyBzdSBzb3N0ZW5pYmlsaWRhZCBhIGxhcmdvIHBsYXpvLgoKICAgICN0XzFfMS50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAxLjFdIFJlbGFjaW9uZXMgcmVzcG9uc2FibGVzIGVudHJlIGVtcHJlc2FzIHkgT05HCgogICAgLnJvdy5tYi01LmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAuY29sLWxnLTQub3JkZXItMgogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvNi5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgIC5jb2wtbGctOC5vcmRlci0xCiAgICAgICAgLmJnLWNvbG9yLTUucC00Lm1iLTMoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLXN0YXJ0CiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzUuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgIHAubWItMCBMYSBjb2xhYm9yYWNpw7NuIGVudHJlIGVtcHJlc2FzIHkgT05HIGVzIHVuYSBlc3RyYXRlZ2lhIGVzZW5jaWFsIHBhcmEgYWJvcmRhciBsb3MgZGVzYWbDrW9zIHNvY2lhbGVzLCBhbWJpZW50YWxlcyB5IGVjb27Ds21pY29zLiBFc3RhIHJlbGFjacOzbiBzZSBiYXNhIGVuIHVuYSBjb29wZXJhY2nDs24gbXV0dWEsIGRvbmRlIGFtYmFzIHBhcnRlcyBhcG9ydGFuIGNvbm9jaW1pZW50b3MgeSBoZXJyYW1pZW50YXMgcGFyYSBhbGNhbnphciBvYmpldGl2b3MgY29tcGFydGlkb3MuIE1pZW50cmFzIGxhcyBlbXByZXNhcyBidXNjYW4gYW1wbGlhciBzdSBpbXBhY3RvIHNvY2lhbCwgbGFzIE9ORyBhcG9ydGFuIGV4cGVyaWVuY2lhIHkgcmVkZXMgcGFyYSBkZXNhcnJvbGxhciBwcm95ZWN0b3MgbcOhcyBpbmNsdXNpdm9zIHkgc29zdGVuaWJsZXMuCiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgRXN0YSBzaW5lcmdpYSBwZXJtaXRlIHJlc29sdmVyIHByb2JsZW1hcyBjb21wbGVqb3MgcXVlIHZhbiBtw6FzIGFsbMOhIGRlIGxhcyBjYXBhY2lkYWRlcyBpbmRpdmlkdWFsZXMuIFNlZ8O6biBHdWliZXJ0IFVjw61uICgyMDEzKSwgbGFzIGVtcHJlc2FzIHB1ZWRlbiBtZWpvcmFyIHN1IGNvbXBldGl0aXZpZGFkIGludGVncmFuZG8gcHLDoWN0aWNhcyBkZSBSU0UgcXVlIGFsaW5lZW4gc3VzIG1ldGFzIGVjb27Ds21pY2FzIGNvbiBlbCBiaWVuZXN0YXIgc29jaWFsLiBMYXMgT05HIGp1ZWdhbiB1biBwYXBlbCBpbXBvcnRhbnRlIGFsIGFwb3J0YXIgY29ub2NpbWllbnRvcyBlc3BlY2lhbGl6YWRvcyB5IGdhcmFudGl6YXIgcXVlIGxhcyBpbmljaWF0aXZhcyBiZW5lZmljaWVuIGEgbGFzIGNvbXVuaWRhZGVzLgogICAgCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci0yLm1iLTUKICAgICAgLnAtNQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctNyhkYXRhLWFvcz0iZmFkZS1sZWZ0Iikub3JkZXItMgogICAgICAgICAgICBoNSBFamVtcGxvIGRlIGNvbGFib3JhY2nDs24KICAgICAgICAgICAgcCBVbmEgYXNvY2lhY2nDs24gZW50cmUgdW5hIGNvbXBhw7HDrWEgYWdyb2luZHVzdHJpYWwgeSB1bmEgT05HIGFtYmllbnRhbCBwdWVkZSBnZW5lcmFyIHByb3llY3RvcyBxdWUgcmVkdXpjYW4gbGEgaHVlbGxhIGVjb2zDs2dpY2EgeSBhcG9ydGVuIGJlbmVmaWNpb3MgZWNvbsOzbWljb3MgYSBsYXMgY29tdW5pZGFkZXMgbG9jYWxlcy4gRXN0ZSB0aXBvIGRlIGNvbGFib3JhY2nDs24gZm9ydGFsZWNlIGxhIHJlcHV0YWNpw7NuIGRlIGxhIGVtcHJlc2EgeSBmb21lbnRhIGxhIGNvbmZpYW56YSBjb24gbG9zIGdydXBvcyBkZSBpbnRlcsOpcy4KICAgICAgICAgIC5jb2wtbGctNShkYXRhLWFvcz0iem9vbS1pbiIpLm9yZGVyLTEubWItMy5tYi1sZy0wCiAgICAgICAgICAgIGltZy5pbWctZmx1aWQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMS83LnBuZycsIHN0eWxlPSJtYXgtd2lkdGg6NDg2cHgiLCBhbHQ9IiIgKS5teC1hdXRvLm14LWxnLTAubXMtbGctYXV0by5tYi00Lm1iLWxnLTAKICAgIAogICAgaDIoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIEVsZW1lbnRvcyBjbGF2ZSBwYXJhIHJlbGFjaW9uZXMgZXhpdG9zYXMKICAgIHAubWItNSBQYXJhIGdhcmFudGl6YXIgZWwgw6l4aXRvIGRlIGVzdGFzIHJlbGFjaW9uZXMsIHNlIGRlYmVuIGNvbnNpZGVyYXIgbG9zIHNpZ3VpZW50ZXMgYXNwZWN0b3M6CgogICAgLmJnLWZ1bGwtd2lkdGguYmctZm9uZG8tNi5tYi0zCiAgICAgIC5weC00LnB4LW1kLTUucGItbWQtMwogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1zdHJldGNoCiAgICAgICAgICAuY29sLWxnLTQubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZC0yLmgtMTAwCiAgICAgICAgICAgICAgaW1nLmN1c3RvbS1pbWFnZS1jYXJkX19pbWFnZShzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzgucG5nIiBhbHQ9IiIpCiAgICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkX190ZXh0LnAtNAogICAgICAgICAgICAgICAgaDUubWItMi50ZXh0LWNlbnRlciBQcm9ww7NzaXRvcyBhbGluZWFkb3MKICAgICAgICAgICAgICAgIHAubWItMCBMYXMgZW1wcmVzYXMgeSBsYXMgT05HIGRlYmVuIGNvbXBhcnRpciB1bmEgdmlzacOzbiBjb23Dum4gY29uIG9iamV0aXZvcyBjbGFyb3MuCiAgICAgICAgICAuY29sLWxnLTQubWItNChkYXRhLWFvcz0iem9vbS1pbi1kb3duIikKICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkLTIuaC0xMDAKICAgICAgICAgICAgICBpbWcuY3VzdG9tLWltYWdlLWNhcmRfX2ltYWdlKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvOS5wbmciIGFsdD0iIikKICAgICAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmRfX3RleHQucC00CiAgICAgICAgICAgICAgICBoNS5tYi0yLnRleHQtY2VudGVyIFRyYW5zcGFyZW5jaWEgeSBjb211bmljYWNpw7NuCiAgICAgICAgICAgICAgICBwLm1iLTAgVW5hIGNvbXVuaWNhY2nDs24gYWJpZXJ0YSBmb3J0YWxlY2UgbGEgY29uZmlhbnphIHkgcGVybWl0ZSBhbGluZWFyIG1ldGFzLCByZWN1cnNvcyB5IGV4cGVjdGF0aXZhcy4KICAgICAgICAgIC5jb2wtbGctNC5tYi00KGRhdGEtYW9zPSJ6b29tLWluLWRvd24iKQogICAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmQtMi5oLTEwMAogICAgICAgICAgICAgIGltZy5jdXN0b20taW1hZ2UtY2FyZF9faW1hZ2Uoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8xMC5wbmciIGFsdD0iIikKICAgICAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmRfX3RleHQucC00CiAgICAgICAgICAgICAgICBoNS5tYi0yLnRleHQtY2VudGVyIEV2YWx1YWNpw7NuIGRlIGltcGFjdG8KICAgICAgICAgICAgICAgIHAubWItMCBFcyBuZWNlc2FyaW8gZXN0YWJsZWNlciBpbmRpY2Fkb3JlcyBkZSDDqXhpdG8gcXVlIG1pZGFuIGxvcyBiZW5lZmljaW9zIHBhcmEgbGEgc29jaWVkYWQgeSBlbXByZXNhcy4KICAgIAogICAgcC5tYi01IFVuIGVqZW1wbG8gcmVsZXZhbnRlIGVzIGxhIGFsaWFuemEgZW50cmUgVW5pbGV2ZXIgeSBSYWluZm9yZXN0IEFsbGlhbmNlLCBxdWUgaW1wbGVtZW50w7MgZXN0cmF0ZWdpYXMgcGFyYSBjYXBhY2l0YXIgYSBwZXF1ZcOxb3MgYWdyaWN1bHRvcmVzIGVuIHByw6FjdGljYXMgc29zdGVuaWJsZXMsIG1lam9yYW5kbyBzdXMgaW5ncmVzb3MgeSByZWR1Y2llbmRvIGVsIGltcGFjdG8gYW1iaWVudGFsIChSYWluZm9yZXN0IEFsbGlhbmNlLCAyMDIwKS4KCgogICAgaDIoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIFJldG9zIHkgb3BvcnR1bmlkYWRlcwogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtbGctNC5tYi0zLm1iLWxnLTAKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzExLnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgLmNvbC1sZy04CiAgICAgICAgLmJnLWNvbG9yLTgucC00Lm1iLTMoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLXN0YXJ0CiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzEyLnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICBwLm1iLTAgQSBwZXNhciBkZSBzdXMgYmVuZWZpY2lvcywgZXN0YXMgcmVsYWNpb25lcyBlbmZyZW50YW4gZGVzYWbDrW9zIGNvbW8gbGEgZmFsdGEgZGUgY29vcmRpbmFjacOzbiBlbiB0aWVtcG9zIHkgcHJpb3JpZGFkZXMsIGFkZW3DoXMgZGUgcG9zaWJsZXMgY29uZmxpY3RvcyBkZSBpbnRlcsOpcy4gU2luIGVtYmFyZ28sIGVzdG9zIHByb2JsZW1hcyBwdWVkZW4gc3VwZXJhcnNlIGNvbiB1biBkaXNlw7FvIGN1aWRhZG9zbyBkZSBsYXMgaW5pY2lhdGl2YXMgeSB1bmEgZ2VzdGnDs24gYWRlY3VhZGEgZGUgbGFzIGRpZmVyZW5jaWFzLCB0cmFuc2Zvcm1hbmRvIGxhcyBkaWZpY3VsdGFkZXMgZW4gb3BvcnR1bmlkYWRlcyBkZSBtZWpvcmEuCiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgRW4gZWwgbWFyY28gZGUgbGEgUlNFLCBsYXMgcmVsYWNpb25lcyByZXNwb25zYWJsZXMgZW50cmUgZW1wcmVzYXMgeSBPTkcgcmVwcmVzZW50YW4gdW5hIGhlcnJhbWllbnRhIGVzdHJhdMOpZ2ljYSBwYXJhIHByb21vdmVyIGVsIGRlc2Fycm9sbG8gc29zdGVuaWJsZS4gRXN0YXMgYWxpYW56YXMgbm8gc29sbyBiZW5lZmljaWFuIGEgbGFzIHBhcnRlcyBpbnZvbHVjcmFkYXMsIHNpbm8gcXVlIHRhbWJpw6luIGdlbmVyYW4gdW4gaW1wYWN0byBwb3NpdGl2byBlbiBsYXMgY29tdW5pZGFkZXMgeSBlbCBtZWRpbyBhbWJpZW50ZSwgY29udHJpYnV5ZW5kbyBhIHVuIGVudG9ybm8gZW1wcmVzYXJpYWwgbcOhcyBpbmNsdXNpdm8sIMOpdGljbyB5IHNvc3RlbmlibGUuCiAgICAKICAgICN0XzFfMi50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAxLjJdIENyZWFjacOzbiBkZSB2YWxvciBtZXpjbGFkbyBlbiBsYXMgPGVtPlBZTUVTPC9lbT4KICAgIAogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtbGctNC5vcmRlci0yCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8xMy5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgIC5jb2wtbGctOC5vcmRlci0xLm1iLTMubWItbGctMAogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIExhIGNyZWFjacOzbiBkZSB2YWxvciBtZXpjbGFkbyBlbiBsYXMgcGVxdWXDsWFzIHkgbWVkaWFuYXMgZW1wcmVzYXMgKFBZTUVTKSBpbnRlZ3JhIGVsIGltcGFjdG8gZWNvbsOzbWljbywgc29jaWFsIHkgYW1iaWVudGFsIGVuIHVuIMO6bmljbyBtb2RlbG8gZGUgbmVnb2Npby4gRXN0ZSBlbmZvcXVlIGVzdHJhdMOpZ2ljbyBwZXJtaXRlIGEgbGFzIGVtcHJlc2FzIGdlbmVyYXIgYmVuZWZpY2lvcyBmaW5hbmNpZXJvcywgY29udHJpYnVpciBhbCBiaWVuZXN0YXIgY29tdW5pdGFyaW8geSBjdWlkYXIgZWwgbWVkaW8gYW1iaWVudGUsIGVuIHVuIGVudG9ybm8gZG9uZGUgbGEgc29zdGVuaWJpbGlkYWQgeSBsYSByZXNwb25zYWJpbGlkYWQgc29jaWFsIHNvbiBjYWRhIHZleiBtw6FzIHZhbG9yYWRhcyBwb3IgY29uc3VtaWRvcmVzIHkgb3Ryb3MgZ3J1cG9zIGRlIGludGVyw6lzLgoKICAgICAgICAuYmctY29sb3ItMy5wLTQubWItMyhkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtc3RhcnQKICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMTQuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgIHAubWItMCBMYXMgUFlNRVMsIHF1ZSByZXByZXNlbnRhbiB1bmEgcGFydGUgaW1wb3J0YW50ZSBkZWwgdGVqaWRvIGVtcHJlc2FyaWFsIGVuIG11Y2hvcyBwYcOtc2VzLCBqdWVnYW4gdW4gcm9sIGZ1bmRhbWVudGFsIGVuIGxhIGdlbmVyYWNpw7NuIGRlIGVtcGxlbyB5IGVsIGRlc2Fycm9sbG8gZWNvbsOzbWljbyBsb2NhbC4gU2Vnw7puIEd1aWJlcnQgVWPDrW4gKDIwMTMpLCBpbmNvcnBvcmFyIGVzdHJhdGVnaWFzIGRlIHJlc3BvbnNhYmlsaWRhZCBzb2NpYWwgZW1wcmVzYXJpYWwgKFJTRSkgeSBzb3N0ZW5pYmlsaWRhZCBsZXMgcGVybWl0ZSBkaWZlcmVuY2lhcnNlIGVuIGVsIG1lcmNhZG8geSBlbmZyZW50YXIgbG9zIGRlc2Fmw61vcyBnbG9iYWxlcy4gUG9yIGVqZW1wbG8sIHVuYSBweW1lIHF1ZSBhZG9wdGEgcHJvY2Vzb3MgZGUgcHJvZHVjY2nDs24gc29zdGVuaWJsZXMgcHVlZGUgcmVkdWNpciBjb3N0b3MgYSBsYXJnbyBwbGF6bywgbWVqb3JhciBzdSBpbWFnZW4geSBmb3J0YWxlY2VyIHJlbGFjaW9uZXMgY29uIGNsaWVudGVzIHkgc29jaW9zIGNvbWVyY2lhbGVzLgogICAgCiAgICBoMihkYXRhLWFvcz0iZmFkZS1sZWZ0IikgRWxlbWVudG9zIGNsYXZlIGRlbCB2YWxvciBtZXpjbGFkbwogICAgcC5tYi01IExhIGNyZWFjacOzbiBkZSB2YWxvciBtZXpjbGFkbyBzZSBmdW5kYW1lbnRhIGVuIHRyZXMgcGlsYXJlczoKCiAgICAuYmctZnVsbC13aWR0aC5iZy1mb25kby02Lm1iLTMKICAgICAgLnB4LTQucHgtbWQtNS5wYi1tZC0zCiAgICAgICAgZGl2LnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLXN0cmV0Y2gubWItNQogICAgICAgICAgZGl2LmNvbC1sZy00Lm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgICAgICBkaXYuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5weC00LnB5LTUuaC0xMDAudGV4dC1jZW50ZXIKICAgICAgICAgICAgICBpbWcubXgtYXV0by5kLWJsb2NrLm1iLTQoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8xNS5zdmciIGFsdD0iIiBzdHlsZT0id2lkdGg6IDkwcHgiKQogICAgICAgICAgICAgIGg1IEVjb27Ds21pY28KICAgICAgICAgICAgICBwLm1iLTAgQXNlZ3VyYXIgbGEgc29zdGVuaWJpbGlkYWQgZmluYW5jaWVyYSBtZWRpYW50ZSBsYSBtZWpvcmEgZGUgbGEgZWZpY2llbmNpYSBvcGVyYXRpdmEgeSBsYSBnZW5lcmFjacOzbiBkZSBiZW5lZmljaW9zIHNvc3RlbmlibGVzLgogICAgICAgIAogICAgICAgICAgZGl2LmNvbC1sZy00Lm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgICAgICBkaXYuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5weC00LnB5LTUuaC0xMDAudGV4dC1jZW50ZXIKICAgICAgICAgICAgICBpbWcubXgtYXV0by5kLWJsb2NrLm1iLTQoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8xNi5zdmciIGFsdD0iIiBzdHlsZT0id2lkdGg6IDkwcHgiKQogICAgICAgICAgICAgIGg1IFNvY2lhbAogICAgICAgICAgICAgIHAubWItMCBCZW5lZmljaWFyIGEgbGFzIGNvbXVuaWRhZGVzIGEgdHJhdsOpcyBkZSBlbXBsZW8gZGlnbm8sIGNhcGFjaXRhY2nDs24gcGFyYSBlbXBsZWFkb3MgeSBhcG95byBhIHByb3llY3RvcyBjb211bml0YXJpb3MuCiAgICAgICAgCiAgICAgICAgICBkaXYuY29sLWxnLTQubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICAgIGRpdi5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnB4LTQucHktNS5oLTEwMC50ZXh0LWNlbnRlcgogICAgICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzE3LnN2ZyIgYWx0PSIiIHN0eWxlPSJ3aWR0aDogOTBweCIpCiAgICAgICAgICAgICAgaDUgQW1iaWVudGFsCiAgICAgICAgICAgICAgcC5tYi0wIFJlZHVjaXIgZWwgaW1wYWN0byBhbWJpZW50YWwgbWVkaWFudGUgcHLDoWN0aWNhcyBjb21vIGxhIGdlc3Rpw7NuIGRlIHJlc2lkdW9zLCBlbCB1c28gZGUgZW5lcmfDrWFzIHJlbm92YWJsZXMgeSBlbCBkaXNlw7FvIGRlIHByb2R1Y3RvcyBlY29sw7NnaWNvcy4KCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci0yLm1iLTUKICAgICAgLnAtNQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctNyhkYXRhLWFvcz0iZmFkZS1sZWZ0Iikub3JkZXItMgogICAgICAgICAgICBoNSBFamVtcGxvIGRlIGNyZWFjacOzbiBkZSB2YWxvciBtZXpjbGFkbwogICAgICAgICAgICBwIFVuYSA8ZW0+cHltZTwvZW0+IGRlZGljYWRhIGEgZmFicmljYXIgZW1wYXF1ZXMgc29zdGVuaWJsZXMgcHVlZGUgZW1wbGVhciBtYXRlcmlhbGVzIHJlY2ljbGFkb3MgeSBwcm9jZXNvcyBlZmljaWVudGVzLCByZWR1Y2llbmRvIHN1IGltcGFjdG8gYW1iaWVudGFsIHkgY29zdG9zIGRlIHByb2R1Y2Npw7NuLiBBbCBhc29jaWFyc2UgY29uIE9ORyBsb2NhbGVzIHBhcmEgY2FwYWNpdGFyIGEgbXVqZXJlcyBlbiBzaXR1YWNpw7NuIGRlIHZ1bG5lcmFiaWxpZGFkLCBwcm9tdWV2ZSBsYSBpbmNsdXNpw7NuIGxhYm9yYWwsIGdlbmVyYW5kbyBiZW5lZmljaW9zIGVjb27Ds21pY29zLCBzb2NpYWxlcyB5IGFtYmllbnRhbGVzLgogICAgICAgICAgLmNvbC1sZy01KGRhdGEtYW9zPSJ6b29tLWluIikub3JkZXItMS5tYi0zLm1iLWxnLTAKICAgICAgICAgICAgaW1nLmltZy1mbHVpZChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWExLzE4LnBuZycsIHN0eWxlPSJtYXgtd2lkdGg6NDg2cHgiLCBhbHQ9IiIgKS5teC1hdXRvLm14LWxnLTAubXMtbGctYXV0by5tYi00Lm1iLWxnLTAKCiAgICBoMihkYXRhLWFvcz0iZmFkZS1sZWZ0IikgQmVuZWZpY2lvcyB5IGRlc2Fmw61vcwogICAgcC5tYi01IExvcyBiZW5lZmljaW9zIHkgZGVzYWbDrW9zIGRlIGxhcyBlc3RyYXRlZ2lhcyBlbXByZXNhcmlhbGVzIHNvc3RlbmlibGVzIHJlZmxlamFuIGVsIGVxdWlsaWJyaW8gbmVjZXNhcmlvIGVudHJlIGVsIGltcGFjdG8gcG9zaXRpdm8geSBsYXMgbGltaXRhY2lvbmVzIGluaGVyZW50ZXMgYSBzdSBpbXBsZW1lbnRhY2nDs24uCgogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtbGctNi5tYi0zLm1iLWxnLTAoZGF0YS1hb3M9ImZhZGUtdXAiKQogICAgICAgIGg1LnRleHQtY2VudGVyLm1iLTAucC00LmJnLWNvbG9yLTkucHN0IEJlbmVmaWNpb3MKICAgICAgICBkaXYucC00LmJnLWNvbG9yLTcucHN0LTEgCiAgICAgICAgICB1bC5saXN0YS11bC5tYi00CiAgICAgICAgICAgIGxpLmQtZmxleC5tYi0zCiAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodCAKICAgICAgICAgICAgICBwLm1iLTAgSW5jcmVtZW50byBlbiBsYSBsZWFsdGFkIGRlIGxvcyBjbGllbnRlcy4KICAgICAgICAgICAgbGkuZC1mbGV4Lm1iLTMKICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0IAogICAgICAgICAgICAgIHAubWItMCBBY2Nlc28gYSBtZXJjYWRvcyBxdWUgdmFsb3JhbiBsYSBzb3N0ZW5pYmlsaWRhZC4KICAgICAgICAgICAgbGkuZC1mbGV4Lm1iLTMKICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0IAogICAgICAgICAgICAgIHAubWItMCBSZWR1Y2Npw7NuIGRlIGNvc3RvcyBvcGVyYXRpdm9zLgoKICAgICAgLmNvbC1sZy02Lm1iLTMubWItbGctMChkYXRhLWFvcz0iZmFkZS1kb3duIikKICAgICAgICBoNS50ZXh0LWNlbnRlci5tYi0wLnB5LTQuYmctY29sb3ItMTAucHN0IERlc2Fmw61vcwogICAgICAgIGRpdi5wLTQuYmctY29sb3ItNi5wc3QtMS5tYi0wIAogICAgICAgICAgdWwubGlzdGEtdWwubWItMAogICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0IAogICAgICAgICAgICAgIHAubWItMCBOZWNlc2lkYWQgZGUgY2FwYWNpdGFyIGVtcGxlYWRvcyB5IHNvY2lvcy4KICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodCAKICAgICAgICAgICAgICBwLm1iLTAgRmFsdGEgZGUgcmVjdXJzb3MgaW5pY2lhbGVzIHBhcmEgaW1wbGVtZW50YXIgdGVjbm9sb2fDrWFzIHNvc3RlbmlibGVzLgogICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0IAogICAgICAgICAgICAgIHAubWItMCBEaWZpY3VsdGFkIHBhcmEgbWVkaXIgZWwgaW1wYWN0byBzb2NpYWwgeSBhbWJpZW50YWwuCiAgICAKICAgIHAubWItNSBMYSBjcmVhY2nDs24gZGUgdmFsb3IgbWV6Y2xhZG8gcGVybWl0ZSBhIGxhcyA8ZW0+UFlNRVM8L2VtPiByZXNwb25kZXIgYSBsYXMgZGVtYW5kYXMgZGUgc29zdGVuaWJpbGlkYWQgeSByZXNwb25zYWJpbGlkYWQgc29jaWFsLCBhc2VndXJhbmRvIHN1IHNvc3RlbmliaWxpZGFkIGEgbGFyZ28gcGxhem8geSBmb21lbnRhbmRvIGVsIGRlc2Fycm9sbG8gaW5jbHVzaXZvIGVuIGxhcyBjb211bmlkYWRlcy4KICAgIAogICAgI3RfMV8zLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIgI1tzcGFuIDEuM10gQ29ycnVwY2nDs24geSBzb2Jvcm5vIGVuIGVsIGNvbnRleHRvIGRlIGxhIFJTRQogICAgCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy04IAogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIExhIGNvcnJ1cGNpw7NuIHkgZWwgc29ib3JubyBzb24gb2JzdMOhY3Vsb3Mgc2lnbmlmaWNhdGl2b3MgcGFyYSBsYXMgb3JnYW5pemFjaW9uZXMgcXVlIGltcGxlbWVudGFuIGVzdHJhdGVnaWFzIGRlIHJlc3BvbnNhYmlsaWRhZCBzb2NpYWwgZW1wcmVzYXJpYWwgKFJTRSkuIEVzdG9zIGFjdG9zIGNvbXByb21ldGVuIGxhIGludGVncmlkYWQgb3JnYW5pemFjaW9uYWwsIGFmZWN0YW4gbGEgc29zdGVuaWJpbGlkYWQgZGUgbGFzIGNvbXVuaWRhZGVzIHkgZXJvc2lvbmFuIGxhIGNvbmZpYW56YSBkZSBsb3MgZ3J1cG9zIGRlIGludGVyw6lzLgogICAgICAgIC5iZy1jb2xvci01LnB4LTQucHktNShkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNAogICAgICAgICAgcC5tYi0wIEFkZW3DoXMgZGUgbGFzIHNhbmNpb25lcyBsZWdhbGVzIHkgZmluYW5jaWVyYXMsIGxhIGNvcnJ1cGNpw7NuIGFmZWN0YSBsYSByZXB1dGFjacOzbiB5IGxhcyByZWxhY2lvbmVzIGRlIGxhcyBlbXByZXNhcy4gTGFzIG9yZ2FuaXphY2lvbmVzIGNvcnJ1cHRhcyBlbmZyZW50YW4gbWF5b3JlcyBjb3N0b3Mgb3BlcmF0aXZvcywgZGlmaWN1bHRhZGVzIHBhcmEgYWNjZWRlciBhIG1lcmNhZG9zIGludGVybmFjaW9uYWxlcyB5IHVuYSBiYWphIG1vcmFsIGVudHJlIGxvcyBlbXBsZWFkb3MuCiAgICAgIC5jb2wtbGctNC5kLW5vbmUuZC1zbS1ibG9jawogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMTkucG5nIiwgZGF0YS1hb3M9Inpvb20taW4iKS5tYi00Lm1iLWxnLTAKCiAgICBoMihkYXRhLWFvcz0iZmFkZS1sZWZ0IikgRXN0cmF0ZWdpYXMgZGUgbWl0aWdhY2nDs24KICAgIHAubWItNSBQYXJhIHByZXZlbmlyIGxhIGNvcnJ1cGNpw7NuIHkgZWwgc29ib3Jubywgc2UgcmVjb21pZW5kYW4gbGFzIHNpZ3VpZW50ZXMgYWNjaW9uZXM6CgogICAgLnJvdy5hbGlnbi1pdGVtcy1zdGFydC5tYi01CiAgICAgIC5jb2wtbGctNC5tYi0zLm1iLWxnLTAKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzIwLnBuZyIsIGFsdD0iIikubWItNC5tYi1sZy0wCiAgICAgIC5jb2wtbGctOAogICAgCiAgICAgICAgQWNvcmRpb25BKHRpcG89ImIiKQogICAgICAgICAgLmRpdih0aXR1bG89IkPDs2RpZ29zIGRlIGNvbmR1Y3RhIikKICAgICAgICAgICAgcC5tYi0wIEVzdGFibGVjZXIgbm9ybWFzIMOpdGljYXMgY2xhcmFzIHBhcmEgZW1wbGVhZG9zIHkgc29jaW9zIGNvbWVyY2lhbGVzLgogICAgCiAgICAgICAgICAuZGl2KHRpdHVsbz0iQ2FwYWNpdGFjacOzbiB5IGNvbmNpZW50aXphY2nDs24iKQogICAgICAgICAgICBwLm1iLTAgU2Vuc2liaWxpemFyIGEgbG9zIGVtcGxlYWRvcyBzb2JyZSBsb3Mgcmllc2dvcyBkZSBjb3JydXBjacOzbiB5IGNhcGFjaXRhcmxvcyBwYXJhIHByZXZlbmlybGEuCiAgICAKICAgICAgICAgIC5kaXYodGl0dWxvPSJDYW5hbGVzIGRlIGRlbnVuY2lhIikKICAgICAgICAgICAgcC5tYi0wIENyZWFyIG1lY2FuaXNtb3Mgc2VndXJvcyBwYXJhIHJlcG9ydGFyIGFjdGl2aWRhZGVzIHNvc3BlY2hvc2FzLgogICAgCiAgICAgICAgICAuZGl2KHRpdHVsbz0iRXZhbHVhY2nDs24gZGUgcHJvdmVlZG9yZXMgeSBzb2Npb3MiKQogICAgICAgICAgICBwLm1iLTAgQXNlZ3VyYXIgcXVlIGxhcyBjb2xhYm9yYWNpb25lcyBjdW1wbGFuIGFsdG9zIGVzdMOhbmRhcmVzIMOpdGljb3MuCiAgICAgIAogICAgaDIoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIFJvbCBkZSBsYXMgUFlNRVMgZW4gbGEgbHVjaGEgY29udHJhIGxhIGNvcnJ1cGNpw7NuCiAgICBwLm1iLTUgQXVucXVlIGxhIGNvcnJ1cGNpw7NuIHNlIGFzb2NpYSBhIG1lbnVkbyBjb24gZ3JhbmRlcyBjb3Jwb3JhY2lvbmVzLCBsYXMgUFlNRVMgdGFtYmnDqW4gZW5mcmVudGFuIGVzdGUgZGVzYWbDrW8uIEVzdGFzIGVtcHJlc2FzIHRpZW5lbiB1bmEgb3BvcnR1bmlkYWQgw7puaWNhIGRlIGxpZGVyYXIgaW5pY2lhdGl2YXMgw6l0aWNhcyBncmFjaWFzIGEgc3UgY2VyY2Fuw61hIGNvbiBsYXMgY29tdW5pZGFkZXMgbG9jYWxlcywgcHJvbW92aWVuZG8gdW5hIGN1bHR1cmEgZGUgdHJhbnNwYXJlbmNpYSB5IHJlc3BvbnNhYmlsaWRhZC4KCiAgICAuYmctY29sb3ItMy5tYi01KGRhdGEtYW9zPSJmYWRlLXVwIikKICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgIC5jb2wtbGctYXV0by5tYi0zLm1iLWxnLTAub3JkZXItMgogICAgICAgICAgZmlndXJlCiAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWExLzIxLnBuZycsIGFsdD0nJykKICAgICAgICAuY29sLWxnLm9yZGVyLTEKICAgICAgICAgIC5wLTQKICAgICAgICAgICAgcC5tYi0wKGRhdGEtYW9zPSJmYWRlLXVwIikgTGEgbHVjaGEgY29udHJhIGxhIGNvcnJ1cGNpw7NuIGVzIGVzZW5jaWFsIHBhcmEgbGFzIGVtcHJlc2FzIGNvbXByb21ldGlkYXMgY29uIGxhIFJTRS4gQWwgaW1wbGVtZW50YXIgbWVkaWRhcyBwcmV2ZW50aXZhcyB5IGZvbWVudGFyIHVuYSBjdWx0dXJhIMOpdGljYSwgbGFzIG9yZ2FuaXphY2lvbmVzIGZvcnRhbGVjZW4gc3UgcmVwdXRhY2nDs24geSBjb250cmlidXllbiBhbCBkZXNhcnJvbGxvIHNvc3RlbmlibGUgZW4gbGFzIGNvbXVuaWRhZGVzIGRvbmRlIG9wZXJhbi4KCiAgICAuYmctZnVsbC13aWR0aC5ib3JkZXItdG9wLmNvbG9yLXByaW1hcmlvCiAgICAgIC5wLTQucC1tZC01CiAgICAgICAgaDIoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIE1BVEVSSUFMIENPTVBMRU1FTlRBUklPCiAgICAgICAgLnJvdy5tYXRlcmlhbC1jb21wbGVtZW50YXJpbwogICAgICAgICAgLmNvbC0xMi5jb2wtbWQtNi5jb2wtbGctNwogICAgICAgICAgICBwIExvcyBpbnZpdGFtb3MgYSBleHBsb3JhciBlbCBtYXRlcmlhbCBjb21wbGVtZW50YXJpbyBkZSBlc3RlIGN1cnNvLCBlbiBlc3RhIHNlY2Npw7NuIGVuY29udHJhcsOhIHJlY3Vyc29zIHF1ZSBsZSBwZXJtaXRpcsOhbiBwcm9mdW5kaXphciAgeSBlbnJpcXVlY2VyIHN1IGFwcmVuZGl6YWplIGVuIGxvcyB0ZW1hcyB0cmF0YWRvcyBlbiBlc3RhIHVuaWRhZC4KCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL2xpbmsuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zcGFyZW5jeS5vcmciIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBUcmFuc3BhcmVuY2lhIEludGVybmFjaW9uYWwuICgyMDIxKS4gSW5mb3JtZSBHbG9iYWwgZGUgQ29ycnVwY2nDs24uIAogICAgICAgICAgICAKCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ljb25vLXl0LnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTdlNkFuZ3RKNVdJIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgQkJWQSBPcGVuTWluZC4gKDIwMjAsIG1hcnpvIDI1KS4gTGEgcmVzcG9uc2FiaWxpZGFkIHNvY2lhbCBlbXByZXNhcmlhbDogdW5hIHZpc2nDs24gZ2xvYmFsIAoKICAgICAgICAgIC5jb2wtMTIuY29sLW1kLTYuY29sLWxnLTMub2Zmc2V0LWxnLTEKICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbWF0ZXJpYWwtY29tcGxlbWVudGFyaW8uc3ZnJywgYWx0PScnKQoK"},null]}